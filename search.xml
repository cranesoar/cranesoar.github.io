<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo的双语配置文件切换脚本</title>
      <link href="/2020/10/16/Hexo%E7%9A%84%E5%8F%8C%E8%AF%AD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%87%E6%8D%A2%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/10/16/Hexo%E7%9A%84%E5%8F%8C%E8%AF%AD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%87%E6%8D%A2%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>由于github的服务器在境外，时常出现国内访问速度慢的问题，考虑实际需要，所以该站采用境内外的双语部署配置文件。每次分别部署时候要手动重命名四个文件，非常麻烦。所以写了这个脚本快速切换配置文件。话说将博客分成中英文两个git分支是最优雅彻底的方式，目前这个先用来应急。<a id="more"></a></p><h3 id="switch-py"><a href="#switch-py" class="headerlink" title="switch.py"></a>switch.py</h3><p>该文件放在hexo博客文件夹的根目录，会自动检测当前配置语言，并切换为另一种配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="comment">#修改hexo配置文件</span></span><br><span class="line">path = <span class="string">r'[博客路径]'</span></span><br><span class="line">files = os.listdir(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">if</span> file == <span class="string">'_config_en.yml'</span>  :</span><br><span class="line">        print(<span class="string">"Transfer hexo CN to EN"</span>)</span><br><span class="line">        srcFile = <span class="string">'./_config.yml'</span></span><br><span class="line">        dstFile = <span class="string">'./_config_cn.yml'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.rename(srcFile,dstFile)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            print(<span class="string">'rename cnfile fail\r\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'rename cnfile success\r\n'</span>)</span><br><span class="line">        srcFile = <span class="string">'./_config_en.yml'</span></span><br><span class="line">        dstFile = <span class="string">'./_config.yml'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.rename(srcFile,dstFile)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            print(<span class="string">'rename enfile fail\r\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'rename enfile success\r\n'</span>)</span><br><span class="line">    <span class="keyword">elif</span> file == <span class="string">'_config_cn.yml'</span> :</span><br><span class="line">        print(<span class="string">"Transfer hexo EN to CN"</span>)</span><br><span class="line">        srcFile = <span class="string">'./_config.yml'</span></span><br><span class="line">        dstFile = <span class="string">'./_config_en.yml'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.rename(srcFile,dstFile)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            print(<span class="string">'rename enfile fail\r\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'rename enfile success\r\n'</span>)</span><br><span class="line">        srcFile = <span class="string">'./_config_cn.yml'</span></span><br><span class="line">        dstFile = <span class="string">'./_config.yml'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.rename(srcFile,dstFile)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            print(<span class="string">'rename cnfile fail\r\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'rename cnfile success\r\n'</span>)</span><br><span class="line"><span class="comment">#修改主题配置文件</span></span><br><span class="line">path = <span class="string">r'主题路径'</span></span><br><span class="line">files = os.listdir(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">if</span> file == <span class="string">'_config_en.yml'</span>  :</span><br><span class="line">        print(<span class="string">"Transfer themes CN to EN"</span>)</span><br><span class="line">        srcFile = path+<span class="string">'/_config.yml'</span></span><br><span class="line">        dstFile = path+<span class="string">'/_config_cn.yml'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.rename(srcFile,dstFile)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            print(<span class="string">'rename cnfile fail\r\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'rename cnfile success\r\n'</span>)</span><br><span class="line">        srcFile = path+<span class="string">'/_config_en.yml'</span></span><br><span class="line">        dstFile = path+<span class="string">'/_config.yml'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.rename(srcFile,dstFile)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            print(<span class="string">'rename enfile fail\r\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'rename enfile success\r\n'</span>)</span><br><span class="line">    <span class="keyword">elif</span> file == <span class="string">'_config_cn.yml'</span> :</span><br><span class="line">        print(<span class="string">"Transfer themes EN to CN"</span>)</span><br><span class="line">        srcFile = path+<span class="string">'/_config.yml'</span></span><br><span class="line">        dstFile = path+<span class="string">'/_config_en.yml'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.rename(srcFile,dstFile)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            print(<span class="string">'rename enfile fail\r\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'rename enfile success\r\n'</span>)</span><br><span class="line">        srcFile = path+<span class="string">'/_config_cn.yml'</span></span><br><span class="line">        dstFile = path+<span class="string">'/_config.yml'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.rename(srcFile,dstFile)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            print(<span class="string">'rename cnfile fail\r\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'rename cnfile success\r\n'</span>)</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/images/2020-10-16-01.png" alt="运行结果" title="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS典型应用命令</title>
      <link href="/2020/10/16/ROS%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/10/16/ROS%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>在ROS使用中，一些很有用却容易忘记的命令记录在这里，不然每次都要重新查。<a id="more"></a></p><h2 id="rosbag"><a href="#rosbag" class="headerlink" title="rosbag"></a>rosbag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*---------------rosbag record---------------*/</span><br><span class="line">rosbag record -a   //录制所有话题</span><br><span class="line">rosbag record /topic1 /topic2 //录制指定话题</span><br><span class="line">rosbag record -O filename.bag /topic1 //设定包文件名</span><br><span class="line">rosbag record -o name /topic1 //设定包前缀</span><br><span class="line">&lt;node pkg=&quot;rosbag&quot; type=&quot;record&quot; name=&quot;bag_record&quot; args=&quot;/topic1 /topic2&quot;/&gt;  //launch文件中的录制命令</span><br><span class="line">/*---------------rosbag play---------------*/</span><br><span class="line">rosbag play &lt;bagfile&gt;　//播放包文件</span><br><span class="line">rosbag play &lt;bagfile&gt; --topics /topic1 //播放指定话题</span><br><span class="line">rosbag play -l &lt;bagfile&gt; //循环播放</span><br><span class="line">rosbag play -d [num] &lt;bagfile&gt; //延时num秒播放</span><br><span class="line">rosbag play -r [num] &lt;bagfile&gt; //按num倍速度播放</span><br><span class="line">rosbag play -u [num] &lt;bagfile&gt; //仅播放前num秒</span><br><span class="line">rosbag play -s [num] &lt;bagfile&gt; //跳过前num秒播放</span><br><span class="line">/*---------------rosbag compress---------------*/</span><br><span class="line">rosbag compress --lz4 &lt;bagfile&gt; //压缩为lz4格式，体积大，打开快</span><br><span class="line">rosbag compress --bz2 &lt;bagfile&gt; //压缩为bz2格式，体积小，打开慢</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>check</td><td>确定一个包是否可以在当前系统播放</td></tr><tr><td>compress/decompress</td><td>包的压缩和解压缩</td></tr><tr><td>filter</td><td>包的过滤，可以用python命令</td></tr><tr><td>fix</td><td>修复active的bag（step2）</td></tr><tr><td>reindex</td><td>重新索引active的bag（step1）</td></tr></tbody></table><hr><h4 id="rosbag的rviz时间过期问题"><a href="#rosbag的rviz时间过期问题" class="headerlink" title="rosbag的rviz时间过期问题"></a><strong><em>rosbag的rviz时间过期问题</em></strong></h4><p><a href="https://www.cnblogs.com/renzmin/articles/12203417.html" target="_blank" rel="noopener">参考博客</a></p><h2 id="rostopic-amp-rosnode"><a href="#rostopic-amp-rosnode" class="headerlink" title="rostopic&amp;rosnode"></a>rostopic&amp;rosnode</h2><p>暂无</p><h2 id="全部重启"><a href="#全部重启" class="headerlink" title="全部重启"></a>全部重启</h2><p>在一些slam算法的launch文件使用时，通过<code>ctrl+c</code>的方式关闭运行的节点时并不能彻底关闭，导致重新启动该launch文件，并播放bag包时，不能成功重新建图，rviz没有任何反应。此时应该在运行launch文件时，先如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall -9 rosmaster</span><br></pre></td></tr></table></figure><p>这样可以彻底关闭之前运行的所有节点</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SLAM </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IMU的误差模型标定和噪声性能分析</title>
      <link href="/2020/10/12/IMU%E7%9A%84%E8%AF%AF%E5%B7%AE%E6%A8%A1%E5%9E%8B%E6%A0%87%E5%AE%9A%E5%92%8C%E5%99%AA%E5%A3%B0%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
      <url>/2020/10/12/IMU%E7%9A%84%E8%AF%AF%E5%B7%AE%E6%A8%A1%E5%9E%8B%E6%A0%87%E5%AE%9A%E5%92%8C%E5%99%AA%E5%A3%B0%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>IMU由于几乎不受外部环境影响能持续估计物体姿态的优异特性，被广泛应用于各种自动化设备。但是由于常见的6Dof传感器缺乏绝对参考，因此存在累计误差，对需要长时间持续运行的设备影响巨大。故对其误差的成分进行分析和标定有重要意义<a id="more"></a><br><a href="https://uav.huanqiu.com/article/9CaKrnK8G4S" target="_blank" rel="noopener">MEMS惯性传感器参数解析</a></p><h2 id="1误差模型"><a href="#1误差模型" class="headerlink" title="1误差模型"></a>1误差模型</h2><p>IMU的误差来主要来自于三部分，包括<strong>噪声(Bias and Noise)</strong>、<strong>尺度因子(Scale errors)</strong> 和<strong>轴偏差(Axis misalignments)</strong>。加速度计和陀螺仪的测量模型可以用下面来表达。<br>$$\begin{aligned} a^{B} &amp;=T^{a} K^{a}\left(a^{S}+b^{a}+v^{a}\right) \\ w^{B} &amp;=T^{g} K^{g}\left(w^{S}+b^{g}+v^{g}\right) \end{aligned}$$<br>其中上标𝑎 表示加速度计，𝑔 表示陀螺仪，𝐵表示正交的参考坐标系，𝑆 表示非正交的选准坐标系。𝑇表示轴偏差的变换矩阵，𝐾 表示尺度因子，𝑏,𝜈分别表示Bias（随机游走或者说是零偏）和白噪声。</p><hr><p>IMU的误差模型通常可以看到两种写法</p><p>-</p><h2 id="2标定方法"><a href="#2标定方法" class="headerlink" title="2标定方法"></a>2标定方法</h2><h3 id="2-1六面标定法"><a href="#2-1六面标定法" class="headerlink" title="2.1六面标定法"></a>2.1六面标定法</h3><h3 id="2-2运动标定法"><a href="#2-2运动标定法" class="headerlink" title="2.2运动标定法"></a>2.2运动标定法</h3><p><a href="https://ieeexplore.ieee.org/document/6907297" target="_blank" rel="noopener">A robust and easy to implement method for IMU calibration without external equipments</a><br><a href="https://github.com/Neil-Oyoung/imu_tk" target="_blank" rel="noopener">imu_tk</a>用于标定系统误差</p><h2 id="3静态误差分析——阿伦方差"><a href="#3静态误差分析——阿伦方差" class="headerlink" title="3静态误差分析——阿伦方差"></a>3静态误差分析——阿伦方差</h2><p><a href="http://blog.sina.com.cn/s/blog_40edfdc90102y1ar.html" target="_blank" rel="noopener">严老师经验谈</a><br><a href="https://telesens.co/wp-content/uploads/2017/05/AllanVariance5087-1.pdf" target="_blank" rel="noopener">Allan Variance: Noise Analysis for Gyroscopes</a><br><a href="https://github.com/gaowenliang/imu_utils" target="_blank" rel="noopener">imu_utils</a>用于标定随机误差</p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用evo工具评估slam定位精度</title>
      <link href="/2020/10/12/%E7%94%A8evo%E5%B7%A5%E5%85%B7%E8%AF%84%E4%BC%B0slam%E5%AE%9A%E4%BD%8D%E7%B2%BE%E5%BA%A6/"/>
      <url>/2020/10/12/%E7%94%A8evo%E5%B7%A5%E5%85%B7%E8%AF%84%E4%BC%B0slam%E5%AE%9A%E4%BD%8D%E7%B2%BE%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>使用多个开源slam算法对同一个bag进行运算，获得其最终的里程计轨迹nav_msgs数据后，使用evo工具求取其分别与ground truth之间的误差。本篇由于跨度较大，采用倒叙来写，先忽视数据来源，从使用开始往回写。<a id="more"></a></p><h2 id="1-运行开源slam算法"><a href="#1-运行开源slam算法" class="headerlink" title="1.运行开源slam算法"></a>1.运行开源slam算法</h2><p>这里用的是lio-mapping和loam（无imu）</p><h2 id="2-获取里程计轨迹数据"><a href="#2-获取里程计轨迹数据" class="headerlink" title="2.获取里程计轨迹数据"></a>2.获取里程计轨迹数据</h2><p>由于两个算法的坐标系定义不同，导致轨迹互相垂直，使用额外ros节点进行重新修正发布，同时保证同步。也可以使用plotjuggler应急，选取不同坐标轴绘制二维轨迹。注意这里记得填充时间戳和frame_id,否则无法进行后续评估。</p><h2 id="3-用evo进行绘图和求误差"><a href="#3-用evo进行绘图和求误差" class="headerlink" title="3.用evo进行绘图和求误差"></a>3.用evo进行绘图和求误差</h2><p> <a href="https://github.com/MichaelGrupp/evo" target="_blank" rel="noopener">EVO工具仓库地址</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回顾大创项目的故事</title>
      <link href="/2020/06/15/%E5%9B%9E%E9%A1%BE%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%95%85%E4%BA%8B/"/>
      <url>/2020/06/15/%E5%9B%9E%E9%A1%BE%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%95%85%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>这个项目是我大学本科时期，利用做RM比赛的几个月业余时间和伙伴一起完成的，结题竟然搞到了院里第一的国优。因为只是凭着兴趣所做的小玩意，有相当的学术水分，所以只当作一段有趣的经历来回忆，便放在故事目录下了。 尤其感谢 <a href="https://www.diywalkers.com/" target="_blank" rel="noopener">DIY Walkers</a>(需使用非港台的VPN访问)的Wade Vagle先生的友好支持，这个项目中的基本设计比例来自他们的工作。<a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开始前我先花点时间感慨下，从去年7月份在光机所建立这个站的将近一年中的数番变故，让我终于得以在今天才偷闲再次打开这里。这一年中有我自身的小气候，也有外围环境的大气候，让我体验深刻。姑且当做是：</p><blockquote><p>行弗乱其所为，所以动心忍性，曾益其所不能吧！</p></blockquote><p>不然还能咋滴。期间感谢我的家人朋友们的帮助和鼓励。特别是我的杜老桌，她的善良和坚强总能让人很踏实，也乐于看到她这些年的变化，哈哈大家都在成长。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>好了进入正题，从我拉着博雯组队搞大创开始，我们的进展就莫名的顺利。没什么大的梦想，就想搞点好玩的东西，借着大创项目的经费。开始的第一天晚上，我就躺在床上一路谷歌百度到四点，顺利确定了我们的选题和开发方案，期间和博雯交换意见，便一拍即合——搞个自主的连杆四足机器人，初期设计参照<a href="https://www.diywalkers.com/" target="_blank" rel="noopener">DIY Walkers</a>的上方案。也是因为一直搞RM的轮式车车有些乏味，汧总吐槽这机器人过个门槛都要人抱。至于后面的项目应用方向的申报却是花了些时间来回横跳，有钱就行了哈哈。一点题外话，可能那年正值四足机器人的风口，我这个选题恰巧押中了次年的RoboCon的比赛主题，后来的在丛老师的机器人设计课上省了不少事，但是我们的连杆四足实际上还是很落伍的，主要是我考虑到业余时间有限，重心还是在RM那边。下面这个图就是我们最终的完成照了，后来又加了个相机上去。<img src="/images/2020-06-16-01.jpg" alt="项目图片"></p><h1 id="方案设计验证"><a href="#方案设计验证" class="headerlink" title="方案设计验证"></a>方案设计验证</h1><p>我们组员的成分还是很有意思的，因为一些妙不可言的缘分。那时我们组员包含了大一，大二，大三；机械，机器人，生医。算是跨学科跨年级团队的典范哈哈，在后面的各种工作中大家各显神通，实在是幸运。前期我计划先将DIY Walkers上的乐高示意方案进行复现，看看将它铝型材重制版时需要做哪些变化。白嫖了强哥在科学馆三楼公司的那堆乐高，加上高中乐高冠军嘉祺的帮助，我们很快便复现了出来。<img src="/images/2020-06-16-02.jpg" alt="2020-06-16-02"></p><hr><p>比照DIY Walkers上的Demo，我们的第一步还算顺利。这个连杆四足的基本腿部比例确定了下来。而对于具体的Klann连杆机理我们并没有深究，后面也就只发了一篇路径规划相关的论文了事。可能是因为我们找了计算机的指导老师吧。<br><img src="/images/2020-06-16-03.gif" alt="2020-06-16-03">     <img src="/images/2020-06-16-04.gif" alt="2020-06-16-04"></p><hr><p>今天先到这里，后面继续更新，这还是挺长。最近才和Wade先生发完邮件，向他们正式致谢，他也对我们的工作表示认可，并将我们的演示视频分享在<a href="https://www.youtube.com/channel/UCpucV3Q9cE_PsVFcyyPDuKw" target="_blank" rel="noopener">他们YouTube的频道</a>，如下所示，我也将其同步上传至我空空的B站。至于邀请我写的专业性的项目分享，我自觉还是水平未到。</p><div style="height: 0;padding-bottom:65%;position: relative;"><br><iframe width="1024" height="768" src="https://www.youtube.com/embed/_OvBInJIV7g" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen style="position: absolute;height: 100%;width: 100%;"> </iframe><br></div> <div style="height: 0;padding-bottom:65%;position: relative;"><br><iframe width="1024" height="768" src="//player.bilibili.com/player.html?aid=668573291&bvid=BV1ea4y1Y7jb&cid=202533840&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen style="position: absolute;height: 100%;width: 100%;"> </iframe><br></div> ]]></content>
      
      
      <categories>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机械 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoboMaster生涯</title>
      <link href="/2019/08/22/RoboMaster%E7%94%9F%E6%B6%AF/"/>
      <url>/2019/08/22/RoboMaster%E7%94%9F%E6%B6%AF/</url>
      
        <content type="html"><![CDATA[<p>最后参与半年的RM2019在此作结 <a id="more"></a><br>憋不住感慨<br>见证了三代队友前赴后继冲击金手终于成功<br>从大成楼一隅到科学馆的三片区<br>从新人散养到精培<br>从目测玄学搞机到数据规范搞机<br>从以前的能者多劳到现在人人都可以是能者<br>在老师和一代代队长带领下，TDT越来越成熟<br>比赛的时候也越来越从容，不再狼狈匆忙<br>在这里老师，前辈，队友们教给我很多<br>希望今后咱们逐渐形成隔壁那样的体系，在RM的赛场上  敢于直面淋漓的鲜奶，保持稳定的成绩。<br>借超哥常引的一句话<br>一个人可以走的很快，但一群人可以走的很远<br>弼辅之心，拳拳可鉴，今当远离，祝更好<br>我庆幸我曾经加入过这么一支团队</p><hr><div style="height: 0;padding-bottom:65%;position: relative;"><br><iframe width="1024" height="768" src="//player.bilibili.com/player.html?aid=64004751&cid=111127206&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen style="position: absolute;height: 100%;width: 100%;"> </iframe><br></div> <hr><p><img src="/images/2019-08-22-06.jpg" alt="2019赛季大金手" title="2019赛季大金手"></p><p><img src="/images/2019-08-22-07.jpg" alt="2017赛季合影" title="2017赛季合影"></p><p><img src="/images/2019-08-22-08.jpg" alt="2018赛季合影" title="2018赛季合影"></p><p><img src="/images/2019-08-22-09.jpg" alt="2019赛季合影" title="2019赛季合影"></p><hr><p><img src="/images/2019-08-22-10.jpg" alt title="一些帅照"></p><p><img src="/images/2019-08-22-11.jpg" alt title="一些帅照"></p><p><img src="/images/2019-08-22-12.jpg" alt title="一些帅照"></p><p><img src="/images/2019-08-22-13.jpg" alt title="一些帅照"></p><p><img src="/images/2019-08-22-14.jpg" alt title="一些帅照"></p>]]></content>
      
      
      <categories>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yolo-V3训练及测试</title>
      <link href="/2019/07/22/Yolo-V3%E8%AE%AD%E7%BB%83%E5%8F%8A%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/07/22/Yolo-V3%E8%AE%AD%E7%BB%83%E5%8F%8A%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>在和队友共同标注了10000张图片后，拷贝进实验室的TitanXP主机，正式开始训练测试进程,Yolo是实验室师姐推荐，实时性较好的神经网络框架。</p><a id="more"></a><p><img src="/images/2019-07-22-02.jpg" alt="标注图片" title="标注图片"><br>主要参考了以下两篇帖子</p><p><a href="https://blog.csdn.net/qq_34806812/article/details/81673798" target="_blank" rel="noopener">每一步超详细！制作自己的voc数据集并通过yolov3训练</a></p><p><a href="https://www.cnblogs.com/xieqi/p/9818056.html" target="_blank" rel="noopener">YOLO-V3实战（darknet）</a></p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p><a href="https://pjreddie.com/darknet/install/" target="_blank" rel="noopener">darknet</a>主机已经安装好了，我们直接开始训练。不过darknet文件夹内已经有师姐训练过的文件，我们需要建立新的文件系列，避开师姐使用过的文件名，避免冲突。</p><h3 id="1-1建立文件树"><a href="#1-1建立文件树" class="headerlink" title="1.1建立文件树"></a>1.1建立文件树</h3><p>在<code>darknet/VOCdevkit</code>下新建文件夹<code>VOC2019</code>，<br><code>VOC2019</code>下有三个文件夹<code>JPEGImages</code>，<code>Annotations</code>，<code>ImageSets</code>。<code>ImageSets</code>下包含两个文件夹<code>Main</code>，<code>Layout</code>。</p><h3 id="1-2拷贝训练集"><a href="#1-2拷贝训练集" class="headerlink" title="1.2拷贝训练集"></a>1.2拷贝训练集</h3><p><code>JPEGImages</code>下放所有的训练图片，最终darknet会按照设定比例随机分配训练集和测试集。<br><code>Annotations</code>下放所有的xml标记文件</p><h3 id="1-3生成txt标签"><a href="#1-3生成txt标签" class="headerlink" title="1.3生成txt标签"></a>1.3生成txt标签</h3><p>将下面代码存为python文件，在<code>VOC2019</code>下运行。在<code>ImageSets</code>-<code>Main</code>路径下生成三个txt文件（<code>test.txt</code>,<code>train.txt</code>,<code>val.txt</code>），里面是不带后缀的图片名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">trainval_percent = <span class="number">0.1</span></span><br><span class="line">train_percent = <span class="number">0.9</span></span><br><span class="line">xmlfilepath = <span class="string">'Annotations'</span></span><br><span class="line">txtsavepath = <span class="string">'ImageSets\Main'</span></span><br><span class="line">total_xml = os.listdir(xmlfilepath)</span><br><span class="line"></span><br><span class="line">num = len(total_xml)</span><br><span class="line">list = range(num)</span><br><span class="line">tv = int(num * trainval_percent)</span><br><span class="line">tr = int(tv * train_percent)</span><br><span class="line">trainval = random.sample(list, tv)</span><br><span class="line">train = random.sample(trainval, tr)</span><br><span class="line"></span><br><span class="line">ftrainval = open(<span class="string">'ImageSets/Main/trainval.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">ftest = open(<span class="string">'ImageSets/Main/test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">ftrain = open(<span class="string">'ImageSets/Main/train.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">fval = open(<span class="string">'ImageSets/Main/val.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">    name = total_xml[i][:<span class="number">-4</span>] + <span class="string">'\n'</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> trainval:</span><br><span class="line">        ftrainval.write(name)</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> train:</span><br><span class="line">            ftest.write(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fval.write(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ftrain.write(name)</span><br><span class="line"></span><br><span class="line">ftrainval.close()</span><br><span class="line">ftrain.close()</span><br><span class="line">fval.close()</span><br><span class="line">ftest.close()</span><br></pre></td></tr></table></figure><hr><p>复制<code>voc_label.py</code>文件为<code>voc_label_car.py</code>，修改如下几处，设置文件路径和分类标签。然后在<code>VOCdevkit</code>路径下运行<code>voc_label_car.py</code>，发现生成了5个list文件（<code>2019_train.txt</code>, <code>2019_val.txt</code>, <code>2019_test.txt</code>, <code>train_car.txt</code>, <code>train_car.all.txt</code>）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sets=[(&apos;2019&apos;, &apos;train&apos;), (&apos;2019&apos;, &apos;val&apos;), (&apos;2019&apos;, &apos;test&apos;)]</span><br><span class="line"></span><br><span class="line">classes = [&quot;car&quot;]</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.system(&quot;cat 2019_train.txt 2019_val.txt &gt; train_car.txt&quot;)</span><br><span class="line">os.system(&quot;cat 2019_train.txt 2019_val.txt 2019_test.txt &gt; train_car.all.txt&quot;)</span><br></pre></td></tr></table></figure><h3 id="1-4修改配置文件"><a href="#1-4修改配置文件" class="headerlink" title="1.4修改配置文件"></a>1.4修改配置文件</h3><h4 id="1-4-1新建cfg-voc-car-data"><a href="#1-4-1新建cfg-voc-car-data" class="headerlink" title="1.4.1新建cfg/voc_car.data"></a>1.4.1新建<code>cfg/voc_car.data</code></h4><p>复制<code>cfg/voc.data</code>进行修改新建。如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">classes= 1</span><br><span class="line">train  = /home/dl/darknet/scripts/train_car.txt</span><br><span class="line">valid  = /home/dl/darknet/scripts/2019_test.txt</span><br><span class="line">names = data/voc_car.names</span><br><span class="line">backup = backup/car</span><br></pre></td></tr></table></figure><h4 id="1-4-2新建data-voc-car-names"><a href="#1-4-2新建data-voc-car-names" class="headerlink" title="1.4.2新建data/voc_car.names"></a>1.4.2新建<code>data/voc_car.names</code></h4><p>内容为标签类型，因为我们训练只有一类car，故只写该类型，如果多个类型则逐行单写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">car</span><br></pre></td></tr></table></figure><h4 id="1-4-3新建cfg-yolov3-voc-car-cfg"><a href="#1-4-3新建cfg-yolov3-voc-car-cfg" class="headerlink" title="1.4.3新建cfg/yolov3-voc-car.cfg"></a>1.4.3新建<code>cfg/yolov3-voc-car.cfg</code></h4><p>复制<code>cfg/yolov3-voc.cfg</code>进行修改新建。<br>1.注释testing，打开train。<br>2.根据显卡的显存大小，设置batch和subdivisions。<br>3.修改三个yolo层的class和filters（<code>filters=3*(class+5)</code>。例如我这里class=1，filters=18。</p><h3 id="1-5下载预训练权重文件"><a href="#1-5下载预训练权重文件" class="headerlink" title="1.5下载预训练权重文件"></a>1.5下载预训练权重文件</h3><p><code>wget https://pjreddie.com/media/files/darknet53.conv.74</code></p><h2 id="2-开始训练并生成训练日志"><a href="#2-开始训练并生成训练日志" class="headerlink" title="2.开始训练并生成训练日志"></a>2.开始训练并生成训练日志</h2><p><code>./darknet detector train cfg/voc_car.data cfg/yolov3-voc-car.cfg darknet53.conv.74 | tee result/log_car/training_car.log</code><br>当loss下降至0.0X，可停止训练。<br>不过在本次训练中，总训练时长6天，loss在0.3到0.4震荡了4天无下降迹象后停止训练。</p><h2 id="3-绘制训练曲线"><a href="#3-绘制训练曲线" class="headerlink" title="3.绘制训练曲线"></a>3.绘制训练曲线</h2><p>进入<code>result/log_car</code>路径</p><h3 id="3-1解析log文件"><a href="#3-1解析log文件" class="headerlink" title="3.1解析log文件"></a>3.1解析log文件</h3><p>在该路径下运行如下python代码，命名为<code>extract_log.py</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 该文件用来提取训练log，去除不可解析的log后使log文件格式化，生成新的log文件供可视化工具绘图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_log</span><span class="params">(log_file, new_log_file, key_word)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(log_file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">with</span> open(new_log_file, <span class="string">'w'</span>) <span class="keyword">as</span> train_log:</span><br><span class="line">            <span class="comment"># f = open(log_file)</span></span><br><span class="line">            <span class="comment"># train_log = open(new_log_file, 'w')</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                <span class="comment"># 去除多gpu的同步log</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">'Syncing'</span> <span class="keyword">in</span> line:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 去除除零错误的log</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">'nan'</span> <span class="keyword">in</span> line:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> key_word <span class="keyword">in</span> line:</span><br><span class="line">                    train_log.write(line)</span><br><span class="line">    f.close()</span><br><span class="line">    train_log.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extract_log(<span class="string">'training_car_sub.log'</span>, <span class="string">'training_log_sub_loss.txt'</span>, <span class="string">'images'</span>)</span><br><span class="line">extract_log(<span class="string">'training_car_sub.log'</span>, <span class="string">'training_log_sub_iou.txt'</span>, <span class="string">'IOU'</span>)</span><br></pre></td></tr></table></figure><p>生成两个txt文件，是解析出的loss和IOU数值。</p><h3 id="3-2绘制loss曲线"><a href="#3-2绘制loss曲线" class="headerlink" title="3.2绘制loss曲线"></a>3.2绘制loss曲线</h3><p>修改对应数值，运行如下python代码，命名为<code>training_loss_sub_visualization.py</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># %matplotlib inline</span></span><br><span class="line"></span><br><span class="line">lines = <span class="number">93841</span>  <span class="comment"># 改为自己生成的train_log_loss.txt中的行数</span></span><br><span class="line">result = pd.read_csv(<span class="string">'training_log_sub_loss.txt'</span>, skiprows=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(lines) <span class="keyword">if</span> ((x % <span class="number">10</span> != <span class="number">9</span>) | (x &lt; <span class="number">1000</span>))],</span><br><span class="line">                     error_bad_lines=<span class="literal">False</span>, names=[<span class="string">'loss'</span>, <span class="string">'avg'</span>, <span class="string">'rate'</span>, <span class="string">'seconds'</span>, <span class="string">'images'</span>])</span><br><span class="line">result.head()</span><br><span class="line"></span><br><span class="line">result[<span class="string">'loss'</span>] = result[<span class="string">'loss'</span>].str.split(<span class="string">' '</span>).str.get(<span class="number">1</span>)</span><br><span class="line">result[<span class="string">'avg'</span>] = result[<span class="string">'avg'</span>].str.split(<span class="string">' '</span>).str.get(<span class="number">1</span>)</span><br><span class="line">result[<span class="string">'rate'</span>] = result[<span class="string">'rate'</span>].str.split(<span class="string">' '</span>).str.get(<span class="number">1</span>)</span><br><span class="line">result[<span class="string">'seconds'</span>] = result[<span class="string">'seconds'</span>].str.split(<span class="string">' '</span>).str.get(<span class="number">1</span>)</span><br><span class="line">result[<span class="string">'images'</span>] = result[<span class="string">'images'</span>].str.split(<span class="string">' '</span>).str.get(<span class="number">1</span>)</span><br><span class="line">result.head()</span><br><span class="line">result.tail()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(result.head())</span></span><br><span class="line"><span class="comment"># print(result.tail())</span></span><br><span class="line"><span class="comment"># print(result.dtypes)</span></span><br><span class="line"></span><br><span class="line">print(result[<span class="string">'loss'</span>])</span><br><span class="line">print(result[<span class="string">'avg'</span>])</span><br><span class="line">print(result[<span class="string">'rate'</span>])</span><br><span class="line">print(result[<span class="string">'seconds'</span>])</span><br><span class="line">print(result[<span class="string">'images'</span>])</span><br><span class="line"></span><br><span class="line">result[<span class="string">'loss'</span>] = pd.to_numeric(result[<span class="string">'loss'</span>])</span><br><span class="line">result[<span class="string">'avg'</span>] = pd.to_numeric(result[<span class="string">'avg'</span>])</span><br><span class="line">result[<span class="string">'rate'</span>] = pd.to_numeric(result[<span class="string">'rate'</span>])</span><br><span class="line">result[<span class="string">'seconds'</span>] = pd.to_numeric(result[<span class="string">'seconds'</span>])</span><br><span class="line">result[<span class="string">'images'</span>] = pd.to_numeric(result[<span class="string">'images'</span>])</span><br><span class="line">result.dtypes</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">ax.plot(result[<span class="string">'avg'</span>].values, label=<span class="string">'avg_loss'</span>)</span><br><span class="line"><span class="comment"># ax.plot(result['loss'].values,label='loss')</span></span><br><span class="line">ax.legend(loc=<span class="string">'best'</span>)  <span class="comment"># 图列自适应位置</span></span><br><span class="line">ax.set_title(<span class="string">'The loss curves'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'batches'</span>)</span><br><span class="line">fig.savefig(<span class="string">'avg_loss'</span>)</span><br><span class="line"><span class="comment"># fig.savefig('loss')</span></span><br></pre></td></tr></table></figure><p><img src="/images/2019-08-22-01.png" alt="loss曲线" title="loss曲线"></p><h3 id="3-3绘制Aug-IOU曲线"><a href="#3-3绘制Aug-IOU曲线" class="headerlink" title="3.3绘制Aug IOU曲线"></a>3.3绘制Aug IOU曲线</h3><p>修改对应数值，运行如下python代码，命名为<code>train_iou_sub_visualization.py</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># %matplotlib inline</span></span><br><span class="line"></span><br><span class="line">lines = <span class="number">3000000</span>  <span class="comment"># 根据train_log_iou.txt的行数修改</span></span><br><span class="line">result = pd.read_csv(<span class="string">'training_log_sub_iou.txt'</span>, skiprows=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(lines) <span class="keyword">if</span> (x % <span class="number">10</span> == <span class="number">0</span> <span class="keyword">or</span> x % <span class="number">10</span> == <span class="number">9</span>)],</span><br><span class="line">                     error_bad_lines=<span class="literal">False</span>, names=[<span class="string">'Region Avg IOU'</span>, <span class="string">'Class'</span>, <span class="string">'Obj'</span>, <span class="string">'No Obj'</span>, <span class="string">'Avg Recall'</span>, <span class="string">'count'</span>])</span><br><span class="line">result.head()</span><br><span class="line"></span><br><span class="line">result[<span class="string">'Region Avg IOU'</span>] = result[<span class="string">'Region Avg IOU'</span>].str.split(<span class="string">': '</span>).str.get(<span class="number">1</span>)</span><br><span class="line">result[<span class="string">'Class'</span>] = result[<span class="string">'Class'</span>].str.split(<span class="string">': '</span>).str.get(<span class="number">1</span>)</span><br><span class="line">result[<span class="string">'Obj'</span>] = result[<span class="string">'Obj'</span>].str.split(<span class="string">': '</span>).str.get(<span class="number">1</span>)</span><br><span class="line">result[<span class="string">'No Obj'</span>] = result[<span class="string">'No Obj'</span>].str.split(<span class="string">': '</span>).str.get(<span class="number">1</span>)</span><br><span class="line">result[<span class="string">'Avg Recall'</span>] = result[<span class="string">'Avg Recall'</span>].str.split(<span class="string">': '</span>).str.get(<span class="number">1</span>)</span><br><span class="line">result[<span class="string">'count'</span>] = result[<span class="string">'count'</span>].str.split(<span class="string">': '</span>).str.get(<span class="number">1</span>)</span><br><span class="line">result.head()</span><br><span class="line">result.tail()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(result.head())</span></span><br><span class="line"><span class="comment"># print(result.tail())</span></span><br><span class="line"><span class="comment"># print(result.dtypes)</span></span><br><span class="line">print(result[<span class="string">'Region Avg IOU'</span>])</span><br><span class="line"></span><br><span class="line">result[<span class="string">'Region Avg IOU'</span>] = pd.to_numeric(result[<span class="string">'Region Avg IOU'</span>])</span><br><span class="line">result[<span class="string">'Class'</span>] = pd.to_numeric(result[<span class="string">'Class'</span>])</span><br><span class="line">result[<span class="string">'Obj'</span>] = pd.to_numeric(result[<span class="string">'Obj'</span>])</span><br><span class="line">result[<span class="string">'No Obj'</span>] = pd.to_numeric(result[<span class="string">'No Obj'</span>])</span><br><span class="line">result[<span class="string">'Avg Recall'</span>] = pd.to_numeric(result[<span class="string">'Avg Recall'</span>])</span><br><span class="line">result[<span class="string">'count'</span>] = pd.to_numeric(result[<span class="string">'count'</span>])</span><br><span class="line">result.dtypes</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">ax.plot(result[<span class="string">'Region Avg IOU'</span>].values, label=<span class="string">'Region Avg IOU'</span>)</span><br><span class="line"><span class="comment"># ax.plot(result['Class'].values,label='Class')</span></span><br><span class="line"><span class="comment"># ax.plot(result['Obj'].values,label='Obj')</span></span><br><span class="line"><span class="comment"># ax.plot(result['No Obj'].values,label='No Obj')</span></span><br><span class="line"><span class="comment"># ax.plot(result['Avg Recall'].values,label='Avg Recall')</span></span><br><span class="line"><span class="comment"># ax.plot(result['count'].values,label='count')</span></span><br><span class="line">ax.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"><span class="comment"># ax.set_title('The Region Avg IOU curves')</span></span><br><span class="line">ax.set_title(<span class="string">'The Region Avg IOU curves'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'batches'</span>)</span><br><span class="line"><span class="comment"># fig.savefig('Avg IOU')</span></span><br><span class="line">fig.savefig(<span class="string">'Region Avg IOU'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/2019-08-22-02.png" alt="Avg IOU曲线" title="Avg IOU曲线"></p><hr><p>在约4000批后，loss开始在0.3~0.4之间震荡不再下降，而IOU（交并比）后来也一直稳定在0.95以上。分析变化曲线，修改cfg文件中的学习率变化策略获得更优的训练效果。</p><h2 id="4-测试训练的权重文件"><a href="#4-测试训练的权重文件" class="headerlink" title="4.测试训练的权重文件"></a>4.测试训练的权重文件</h2><p><img src="/images/2019-08-22-03.png" alt="未在数据集的图片测试" title="未在数据集的图片测试"><br>我们使用前10000张图片进行训练，随机抽取后7000张图片进行测试。对于右上角停车场和上方十字路口处的车辆，在训练集中未对其进行标注，测试时也没有被网络框选。</p><hr><p><img src="/images/2019-08-22-04.png" alt="原始网络图片" title="原始网络图片"></p><hr><p><img src="/images/2019-08-22-05.jpg" alt="网络图片测试" title="网络图片测试"></p><hr><p>对于在网上特殊挑选，环境光相似，车辆密度相似的车流图片，训练出的网络也展现出来良好的识别能力，甚至对于训练集中未曾标注的公交车也成功识别，体现了Yolo一定程度的泛化能力。</p><h2 id="细节拓展"><a href="#细节拓展" class="headerlink" title="细节拓展"></a>细节拓展</h2><p><a href="https://www.cnblogs.com/DicksonJYL/p/9467511.html" target="_blank" rel="noopener">MLE&amp;MAP(最大似然估计和最大后验概率估计)</a></p><p><a href="https://blog.csdn.net/guleileo/article/details/80581858" target="_blank" rel="noopener">从YOLOv1到YOLOv3，目标检测的进化之路</a></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Yolo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用labelImg高效标注数据集</title>
      <link href="/2019/07/22/%E7%94%A8labelImg%E9%AB%98%E6%95%88%E6%A0%87%E6%B3%A8%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
      <url>/2019/07/22/%E7%94%A8labelImg%E9%AB%98%E6%95%88%E6%A0%87%E6%B3%A8%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>作为小白，视觉实习的第一个任务就是标注工，和我的小白队友共同承担10000张图片中车辆的标注工作。实习时间有限，标注枯燥无味，便和队友搞了个批处理脚本，大幅提高了标注效率。</p><a id="more"></a><h2 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h2><p>由于我是前5000张图片，顺序标号从<code>1.png</code>开始，在labelImg中，按文件夹打开后，文件排序呈现左对齐的情况，即按第一个数字大小排序：</p><ul><li>1.png</li><li>10.png</li><li>100.png</li></ul><p>这里应该将文件名修改为<code>0001.png</code>这种格式。修改的matlab代码如下，但是奇怪的是在师姐电脑运行修改顺序正确，我的电脑看matlab里的文件读取结构体顺序依旧是左对齐。无奈在师姐那里修改完再拷贝回来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">%%</span><br><span class="line">%图片保存路径为：</span><br><span class="line">%E:\image\car</span><br><span class="line">%E:\image\person</span><br><span class="line">%car和person是保存车和行人的文件夹</span><br><span class="line">%这些文件夹还可以有多个，</span><br><span class="line">%放在image文件夹里就行</span><br><span class="line">%该代码的作用是将图片名字改成000123.jpg这种形式</span><br><span class="line">%%</span><br><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line"> </span><br><span class="line">maindir=&apos;D:\1魏鹤翔\长春光机所\标注工\rename\test&apos;;</span><br><span class="line">name_long=5; %图片名字的长度，如000123.jpg为6,最多9位,可修改</span><br><span class="line">num_begin=1; %图像命名开始的数字如000123.jpg开始的话就是123</span><br><span class="line"> </span><br><span class="line">subdir = dir(maindir);</span><br><span class="line">n=1;</span><br><span class="line"> </span><br><span class="line">for i = 1:length(subdir)</span><br><span class="line">  %if ~strcmp(subdir(i).name ,&apos;.&apos;) &amp;&amp; ~strcmp(subdir(i).name,&apos;..&apos;)</span><br><span class="line">  if ~strcmp(subdir(i).name ,&apos;.&apos;) || ~strcmp(subdir(i).name,&apos;..&apos;)</span><br><span class="line">     subsubdir = dir(strcat(maindir,subdir(i).name));</span><br><span class="line">    for j=1:length(subsubdir)</span><br><span class="line">         if ~strcmp(subsubdir(j).name ,&apos;.&apos;) &amp;&amp; ~strcmp(subsubdir(j).name,&apos;..&apos;)</span><br><span class="line">            img=imread([maindir,subdir(i).name,&apos;\&apos;,subsubdir(j).name]);</span><br><span class="line">            imshow(img);</span><br><span class="line">            str=num2str(num_begin,&apos;%09d&apos;);</span><br><span class="line">            newname=strcat(str,&apos;.png&apos;);</span><br><span class="line">            newname=newname(end-(name_long+3):end);</span><br><span class="line">            system([&apos;rename &apos; [maindir,subdir(i).name,&apos;\&apos;,subsubdir(j).name] &apos; &apos; newname]);</span><br><span class="line">            num_begin=num_begin+1;</span><br><span class="line">            fprintf(&apos;当前处理文件夹%s&apos;,subdir(i).name);</span><br><span class="line">            fprintf(&apos;已经处理%d张图片\n&apos;,n);</span><br><span class="line">            n=n+1;</span><br><span class="line">           pause(0.1);%可以将暂停去掉</span><br><span class="line">         end</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="复制并顺序命名标注文件"><a href="#复制并顺序命名标注文件" class="headerlink" title="复制并顺序命名标注文件"></a>复制并顺序命名标注文件</h2><p> 由于我们的图片是视频文件顺序截取，所以两张图片之间的标注信息具有高度相似性，这也是为什么上面一定要按顺序排序文件。这样一来，我们只需对上一张的标注信息做少量修改即可。于是我们便一起写了这个windows的批处理文件，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd. &gt;name.txt    //清空命名txt文件</span><br><span class="line">set /a start=4990  //设置复制目标文件</span><br><span class="line">set /a long=15    //设置复制文件个数</span><br><span class="line">set /a end=start+long</span><br><span class="line">for /l %%i in (%start%,1,%end%) do (echo %%i.xml &gt;&gt; name.txt)  //将文件名按顺序写入命名txt文件</span><br><span class="line"></span><br><span class="line">set name=%start%.xml</span><br><span class="line"></span><br><span class="line">for /f %%i in (test.txt) do (</span><br><span class="line">  echo F|(copy %name% %%i)</span><br><span class="line">)  //复制目标标注文件并按照txt文件内容命名新的标注文件</span><br></pre></td></tr></table></figure><p> 这样我们标好一张图片，邻近的10张左右便可以仅修改即可。批处理bat文件和txt文件以及xml文件放在同一个文件夹下，运行即可。</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p> 我们这样仅对文件名进行修改，导致标注文件中的图片和路径信息与图片不对应，仍然是源文件信息。</p><p><img src="/images/2019-07-22-01.jpg" alt="标注文件内容" title="标注文件内容"></p><p>所幸标注软件和训练框架都是读取文件名来对应图片，所以对于内部信息的错误并无影响。但是看到有人和我们碰到相同的问题并用python脚本顺利解决，这里记录一下，以后可能用得着。</p><p><a href="https://blog.csdn.net/qq_41983165/article/details/87919633" target="_blank" rel="noopener">批量重命名文件名</a></p><p><a href="https://blog.csdn.net/qq_41983165/article/details/87977712" target="_blank" rel="noopener">修改xml文件的path和filename</a></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 批处理 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客的git终端使用</title>
      <link href="/2019/07/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84git%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84git%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>趁着这几天刚搞完博客部署，域名配置这些事，赶紧记录一下主要操作，避免以后长时间不用忘记了</p><a id="more"></a><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><p>在根目录打开 git bash 运行下面语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -d</span><br></pre></td></tr></table></figure><p>是<strong>hexo sever</strong>的简写，在本地运行admin页面，在浏览器中打开如下网址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/admin</span><br></pre></td></tr></table></figure><p>进入管理页面，进行博客内容管理，新建修改等操作</p><h3 id="删除废弃标签，分类"><a href="#删除废弃标签，分类" class="headerlink" title="删除废弃标签，分类"></a>删除废弃标签，分类</h3><p>对于空标签，空分类，在管理页面检查无误后，在根目录运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>将历史静态页面删除，再运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>重新生成静态页面，并更新部署到远程仓库</p><h3 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h3><p>将修改完的配置，博客保存后首先</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>生成新的静态页面，然后通过下面语句在本地部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>浏览器中打开<code>http://localhost:4000</code>即可立即查看，若没有问题更新远程仓库则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>等待大约一分钟左右即可在对应域名看到远程更新。</p><hr><p>生成静态页面和远程部署操作也可以融合为一句<code>hexo d -g</code>或<code>hexo g -d</code>，更加方便快捷。</p><ul><li>s ==&gt; sever</li><li>g ==&gt; generate</li><li>d ==&gt; deploy</li></ul><h3 id="博客备份"><a href="#博客备份" class="headerlink" title="博客备份"></a>博客备份</h3><p>方便以后电脑环境重新配置，安装了hexo-git-backup,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo backup 或 hexo b</span><br></pre></td></tr></table></figure><p>就可以推送到根目录配置文件<code>_config.yml</code>指定的备份仓库的指定分支，可以设置想要备份的主题文件夹，这样以后重新安装hexo后，再克隆下来即可。</p><h3 id="博客恢复"><a href="#博客恢复" class="headerlink" title="博客恢复"></a>博客恢复</h3><p>今天有空在我的minipc上重新配置我的博客环境，并从之前的备份仓库同步了进度，基本一步一个坑，终于搞好了，在这里记录一下，方便后面再次部署。</p><hr><p>1.安装git，nodejs</p><ul><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git的windows安装包</a></li><li><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node.js的windows安装包</a></li></ul><hr><p>2.配置添加本机sshkey在git账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p>把<code>cd ~/.ssh</code>下的pub密钥加进去，记得配置全局用户名，得有一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;// </span><br><span class="line">git config --global user.email  &quot;邮箱&quot;//</span><br></pre></td></tr></table></figure><hr><p>3.安装hexo环境，在博客仓库根目录下打开git bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install hexo-deployer-git</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><hr><p>4.按理说在这一步应该已经完成了，可以打开server并快乐generate和deploy了，然鹅事情并不简单。我遇到了如下问题</p><ul><li><code>hexo g</code> 时报如下错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ERROR Plugin load failed: hexo-server</span><br><span class="line">Error: Cannot find module &apos;./db.json&apos;</span><br><span class="line">    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:668:15)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:591:27)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:723:19)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:14:16)</span><br></pre></td></tr></table></figure><p>在<a href="https://github.com/hexojs/hexo/issues/2689" target="_blank" rel="noopener">这里</a>找到了好用的解决方法，是因为hexo版本不匹配的问题需要进行清除并更新。<br>尝试使用<code>npm upgrade</code>或升级依赖项<code>npm upgrade hexo-server</code>在执行此操作之前<code>hexo clean</code>，<code>rm -rf node_modules</code>。好下一个</p><ul><li><code>hexo d</code>时出现如下错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</span><br><span class="line">    at copyFile (fs.js:1890:10)</span><br><span class="line">    at tryCatcher (D:\Blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at ret (eval at makeNodePromisifiedEval (D:\Node\node_global\node_modules\hexo-cli\node_modules\bluebird\js\release\promisify.js:184:12), &lt;anonymous&gt;:13:39)</span><br><span class="line">    at D:\Blog\node_modules\hexo-fs\lib\fs.js:144:39</span><br><span class="line">    at tryCatcher (D:\Blog\node_modules\bluebird\js\release\util.js:16:23)</span><br></pre></td></tr></table></figure><p>这是因为默认安装的node14.13版本过高所致，hexo并不能兼容。我们需要安装nvm（node版本管理器）来进行我安装了12.7.0来解决这个问题。这个<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>及其好用，直接安装包安装即可，然后在git bash中通过<code>nvm list</code>进行node多版本的查看，<code>nvm install [版本号]</code>进行node版本的安装，<code>nvm use [版本号]</code>选择所需的node版本。貌似只要不是node14都可以支持hexo。</p><ul><li><code>hexo b</code>时，配置文件中的远程仓库不能访问，如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatal: &apos;my_homepages&apos; does not appear to be a git repository</span><br><span class="line">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure><p>这是因为在本git环境下没有添加该远程仓库，使用该命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add my_homepages git@github.com:cranesoar/my_homepages.git</span><br></pre></td></tr></table></figure><p>要是不小心添加错了地址，使用<code>git remote remove [name]</code>移除，并重新添加。</p><hr><p>这样一顿操作后，之前的博客仓库在新电脑下运行起来了，但是发现有些页面的排版和符号的显示有突变和bug，这个不要慌，将根目录的博客备份版本直接回退到之前电脑的最新版本，<code>hexo clean</code>后重新编译部署就都回来了！在新电脑上开干！</p><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown标记语言</title>
      <link href="/2019/07/20/Markdown%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/"/>
      <url>/2019/07/20/Markdown%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p><strong>Markdown是一种轻量级的「标记语言」</strong><br>我们经常可以见到git仓库初始化时的readme.md文件，即是用它写的。Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面，Markdown文件的后缀名便是“.md”。我本站的博客也是用该语言记录。</p><a id="more"></a><p>本篇内容主要参考自<a href="https://www.mdeditor.com/" title="Markdown" target="_blank" rel="noopener">Markdown</a>。</p><h2 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h2><h3 id="1-字符效果和横线"><a href="#1-字符效果和横线" class="headerlink" title="1. 字符效果和横线"></a>1. 字符效果和横线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 标题H1</span><br><span class="line">## 标题H2</span><br></pre></td></tr></table></figure><h1 id="标题H1"><a href="#标题H1" class="headerlink" title="标题H1"></a>标题H1</h1><h2 id="标题H2"><a href="#标题H2" class="headerlink" title="标题H2"></a>标题H2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--- (横线)</span><br><span class="line">&lt;s&gt;删除线（开启识别HTML标签时）&lt;/s&gt; (删除线)</span><br><span class="line">*斜体字*      _斜体字_</span><br><span class="line">**粗体**  __粗体__</span><br><span class="line">***粗斜体*** ___粗斜体___</span><br><span class="line">上标：X&lt;sub&gt;2&lt;/sub&gt;，下标：O&lt;sup&gt;2&lt;/sup&gt;</span><br></pre></td></tr></table></figure><hr><p><s>删除线（开启识别HTML标签时）</s></p><p><em>斜体字</em>      <em>斜体字</em></p><p><strong>粗体</strong>  <strong>粗体</strong></p><p><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><h3 id="2-引用-Blockquotes"><a href="#2-引用-Blockquotes" class="headerlink" title="2. 引用 Blockquotes"></a>2. 引用 Blockquotes</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用文本 Blockquotes</span><br><span class="line"></span><br><span class="line">引用的行内混合 Blockquotes</span><br><span class="line"></span><br><span class="line">&gt; 引用：如果想要插入空白换行`即&lt;br /&gt;标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](https://www.mdeditor.com/)。</span><br></pre></td></tr></table></figure><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="https://www.mdeditor.com" target="_blank" rel="noopener">普通链接</a>。</p></blockquote><h3 id="3-锚点与链接-Links"><a href="#3-锚点与链接-Links" class="headerlink" title="3. 锚点与链接 Links"></a>3. 锚点与链接 Links</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[普通链接](https://www.mdeditor.com/)</span><br><span class="line">[普通链接带标题](https://www.mdeditor.com/ &quot;普通链接带标题&quot;)</span><br><span class="line">直接链接：&lt;https://www.mdeditor.com&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.mdeditor.com/" target="_blank" rel="noopener">普通链接</a></p><p><a href="https://www.mdeditor.com/" title="普通链接带标题" target="_blank" rel="noopener">普通链接带标题</a></p><p>直接链接：<a href="https://www.mdeditor.com" target="_blank" rel="noopener">https://www.mdeditor.com</a></p><h3 id="4-多语言代码高亮-Codes"><a href="#4-多语言代码高亮-Codes" class="headerlink" title="4. 多语言代码高亮 Codes"></a>4. 多语言代码高亮 Codes</h3><h4 id="4-1-行内代码-Inline-code"><a href="#4-1-行内代码-Inline-code" class="headerlink" title="4.1 行内代码 Inline code"></a>4.1 行内代码 Inline code</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行命令：`npm install marked`</span><br></pre></td></tr></table></figure><p>执行命令：<code>npm install marked</code></p><h4 id="4-2-缩进风格"><a href="#4-2-缩进风格" class="headerlink" title="4.2 缩进风格"></a>4.2 缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &quot;Hello world!&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><h3 id="5-图片加链接-Images"><a href="#5-图片加链接-Images" class="headerlink" title="5. 图片加链接 Images"></a>5. 图片加链接 Images</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![](/images/avatar1.jpg)](http://www.cranefly88.cn &quot;CraneFly88&quot;)</span><br></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>在Windows系统中，正斜杠/表示除法，用来进行整除运算；<strong>反斜杠\用来表示目录</strong>。</li><li>在Unix系统中，<strong>正斜杠/表示目录</strong>；\表示跳脱字符将特殊字符变成一般字符（如enter,$,空格等）</li></ul><p>由于我在Windows下写博客，所以一开始我用反斜杠\引用图片，出现预览可以看到图片，但是网页不可见的现象。考虑到由于hexo运行在unix环境下，故应该修改为用正斜杠/引用图片才好使。<br><a href="http://www.cranefly88.cn" title="CraneFly88" target="_blank" rel="noopener"><img src="/images/avatar1.jpg" alt></a></p><h3 id="6-绘制表格-Tables"><a href="#6-绘制表格-Tables" class="headerlink" title="6. 绘制表格 Tables"></a>6. 绘制表格 Tables</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Function name | Description                    |</span><br><span class="line">| ------------- | ------------------------------ |</span><br><span class="line">| `help()`      | Display the help window.       |</span><br><span class="line">| `destroy()`   | **Destroy your computer!**     |</span><br></pre></td></tr></table></figure><table><thead><tr><th>Function name</th><th>Description</th></tr></thead><tbody><tr><td><code>help()</code></td><td>Display the help window.</td></tr><tr><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目        | 价格   |  数量  |</span><br><span class="line">| --------   | -----:  | :----:  |</span><br><span class="line">| 计算机      | $1600   |   5     |</span><br><span class="line">| 手机        |   $12   |   12   |</span><br><span class="line">| 管线        |    $1    |  234  |</span><br></pre></td></tr></table></figure><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234 #</td></tr></tbody></table><h3 id="7-科学公式-TeX-KaTeX"><a href="#7-科学公式-TeX-KaTeX" class="headerlink" title="7. 科学公式 TeX(KaTeX)"></a>7. 科学公式 TeX(KaTeX)</h3><p><a href="https://www.jianshu.com/p/a0aa94ef8ab2" title="科学公式" target="_blank" rel="noopener">Markdown科学公式详解</a></p><h3 id="8-绘制流程图，序列图"><a href="#8-绘制流程图，序列图" class="headerlink" title="8. 绘制流程图，序列图"></a>8. 绘制流程图，序列图</h3><p>在此不必要展开</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> 语言 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why Blog</title>
      <link href="/2019/07/18/indexs/"/>
      <url>/2019/07/18/indexs/</url>
      
        <content type="html"><![CDATA[<p><strong>鹤翔的个人站</strong> 是魏鹤翔的个人站。始建于大三暑期，长春光机所实习期间，终于决定要记录过去才能清晰未来。</p><a id="more"></a><p>目前看，这个站还是建晚了，大学前三年的项目丰富期已经过去，暂时不会有太多需要记录的东西了。但是光机所头几天遭遇让我下定建这个站的决心。以前耗费4，5天已经完成过的事，再次碰到却宛如新生，尴尬至极。若是久之以往，可以预见到的是，将来必然还会频繁如此上演。<br>三年来，看过了前辈们潮水般的博客，帖子，书页，鱼龙混杂。解决自己问题后便扔回大海，分散在各处。回想来，记住的屈指可数，呵凡人一个。我的时间不多了，不能再这样重复耗费，不能再这样无所追忆，希望这里会是今后前进的牢固后盾。</p><blockquote><p>Talk is cheap,Show me the code.</p></blockquote><h2 id="博客平台"><a href="#博客平台" class="headerlink" title="博客平台"></a>博客平台</h2><p>这个博客部署在 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a></p><p>主要功能：</p><ul><li>搜索支持文章标题、标签(#标签)、作者(@作者)</li><li>Pad/手机等移动端适配</li></ul>]]></content>
      
      
      <categories>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
